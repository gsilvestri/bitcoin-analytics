package com.gconsulting.rest;

import java.net.URI;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import org.glassfish.jersey.client.ClientConfig;
import org.json.JSONArray;
import org.json.JSONObject;

public class ReadTest {

	private static final String ALLCOIN_URL = "https://www.allcoin.com/api2/pairs";
	private static final String BTC-E_URL = "https://btc-e.com/api/3/info";

	public static void main(String[] args) {

		ClientConfig config = new ClientConfig();
		Client client = ClientBuilder.newClient(config);
		WebTarget target = client.target(getBaseURI());
		Builder builder = target.request(
				MediaType.APPLICATION_JSON_TYPE);
		Response response = builder.get();
		if (response.getStatus() != 200) {
			throw new RuntimeException("Failed : HTTP error code : "
					+ response.getStatus());
		}
		System.out.println("URI: " + target.getUri().toString());
		System.out.println("Server response: " + response.toString());
		String resonseString = response.readEntity(String.class);
		System.out.println("Response: " + resonseString);
		JSONObject resultJSON = new JSONObject(resonseString);
		System.out.println("Code: " + resultJSON.getInt("code"));
		JSONObject data = resultJSON.getJSONObject("data");
		JSONArray names = data.names();
		for (int i = 0; i < names.length(); i++) {
			System.out.println(names.get(i));				
		}
	}

	private static URI getBaseURI() {

		return UriBuilder.fromUri(BASE_URL).build();
	}
}
